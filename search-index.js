crystal_doc_search_index_callback({"repository_name":"Wordsmith","body":"# Wordsmith\n\n[![API Documentation Website](https://img.shields.io/website?down_color=red&down_message=Offline&label=API%20Documentation&up_message=Online&url=https%3A%2F%2Fluckyframework.github.io%2Fwordsmith%2F)](https://luckyframework.github.io/wordsmith)\n\nWordsmith is a library for pluralizing, ordinalizing, singularizing and doing\nother fun and useful things with words.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  wordsmith:\n    github: luckyframework/wordsmith\n```\n\n## Usage\n\n```crystal\nrequire \"wordsmith\"\n\nWordsmith::Inflector.pluralize(\"word\") # \"words\"\nWordsmith::Inflector.singularize(\"categories\") # \"category\"\nWordsmith::Inflector.camelize(\"application_controller\") # \"ApplicationController\"\nWordsmith::Inflector.underscore(\"CheeseBurger\") # \"cheese_burger\"\nWordsmith::Inflector.humanize(\"employee_id\") # \"Employee\"\nWordsmith::Inflector.titleize(\"amazon web services\") # \"Amazon Web Services\"\nWordsmith::Inflector.tableize(\"User\") # \"users\"\nWordsmith::Inflector.classify(\"users\") # \"User\"\nWordsmith::Inflector.dasherize(\"post_office\") # \"post-office\"\nWordsmith::Inflector.ordinalize(4) # \"4th\"\nWordsmith::Inflector.demodulize(\"Helpers::Mixins::User\") # \"User\"\nWordsmith::Inflector.deconstantize(\"User::FREE_TIER_COMMENTS\") # \"User\"\nWordsmith::Inflector.foreign_key(\"Person\") # \"person_id\"\nWordsmith::Inflector.parameterize(\"Admin/product\") # \"admin-product\"\n```\n\nWordsmith comes with a `ws` CLI utility which allows you to process words from the command line. You can download it directly from the [releases page](https://github.com/luckyframework/wordsmith/releases).\n\n```sh\n ╰─ $ ./ws \nUsage: ws <option> WORD\n\nWordsmith is a library for pluralizing, singularizing and doing\nother fun and useful things with words.\n\nCommand `ws` is the command line version of Wordsmith, not all\nfeatures of Wordsmith are implemented, for precompiled binary,\nplease download from github releases page.\n\nhttps://github.com/luckyframework/wordsmith/releases\n\nsome examples:\n\n$: ws -s people # => person\n$: ws -p person # => people\n\nYou can use it with pipe:\n\n$: echo \"WordSmith\" |ws -u |ws -d # => word-smith\n\nmore examples, please check https://github.com/luckyframework/wordsmith#usage\n\n    -s WORD, --singularize=WORD      Return the singular version of the word.\n    -p WORD, --pluralize=WORD        Return the plural version of the word.\n    -c WORD, --camelize=WORD         Return the camel-case version of that word.\n    -C WORD, --camelize-downcase=WORD\n                                     Return the camel-case version of that word, but the first letter not capitalized.\n    -u WORD, --underscore=WORD       Convert a given camel-case word to it's underscored version.\n    -d WORD, --dasherize=WORD        Convert a given underscore-separated word to the same word, separated by dashes.\n    -h, --help                       Show this help\n```\n\n## Custom inflections\n\nIf something isn't pluralizing correctly, it's easy to customize.\n\n```crystal\n# Place this in a config file like `config/inflectors.cr`\nrequire \"wordsmith\"\n\n# To pluralize a single string in a specific way\nWordsmith::Inflector.inflections.irregular(\"human\", \"humans\")\n\n# To stop Wordsmith from pluralizing a word altogether\nWordsmith::Inflector.inflections.uncountable(\"equipment\")\n```\n\n## Contributing\n\n1. Fork it ( https://github.com/luckyframework/wordsmith/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Make your changes\n4. Run `./bin/test` to run the specs, build shards, and check formatting\n5. Commit your changes (git commit -am 'Add some feature')\n6. Push to the branch (git push origin my-new-feature)\n7. Create a new Pull Request\n\n## Testing\n\nTo run the tests:\n\n- Run the tests with `./bin/test`\n\n## Contributors\n\n- [paulcsmith](https://github.com/paulcsmith) Paul Smith - creator, maintainer\n- [actsasflinn](https://github.com/actsasflinn) Flinn Mueller - contributor\n\n## Thanks & attributions\n\n- Inflector is based on [Rails](https://github.com/rails/rails). Thank you to the Rails team!\n","program":{"html_id":"Wordsmith/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"Wordsmith","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"Wordsmith/Wordsmith","path":"Wordsmith.html","kind":"module","full_name":"Wordsmith","name":"Wordsmith","abstract":false,"locations":[{"filename":"src/wordsmith.cr","line_number":4,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith.cr#L4"},{"filename":"src/wordsmith/inflections.cr","line_number":3,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflections.cr#L3"},{"filename":"src/wordsmith/inflector/inflections.cr","line_number":1,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L1"},{"filename":"src/wordsmith/inflector/methods.cr","line_number":3,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L3"}],"repository_name":"Wordsmith","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version \\\"/home/runner/work/wordsmith/wordsmith/src\\\"`).chomp.stringify }}","doc":"The current Wordsmith version is defined in `shard.yml`","summary":"<p>The current Wordsmith version is defined in <code>shard.yml</code></p>"}],"doc":"Wordsmith is a library for pluralizing, ordinalizing, singularizing and doing other fun and useful things with words.","summary":"<p>Wordsmith is a library for pluralizing, ordinalizing, singularizing and doing other fun and useful things with words.</p>","class_methods":[{"html_id":"load:Nil-class-method","name":"load","abstract":false,"location":{"filename":"src/wordsmith/inflections.cr","line_number":4,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflections.cr#L4"},"def":{"name":"load","return_type":"Nil","visibility":"Public","body":"Inflector.inflections.plural(/$/, \"s\")\nInflector.inflections.plural(/s$/i, \"s\")\nInflector.inflections.plural(/^(ax|test)is$/i, \"\\\\1es\")\nInflector.inflections.plural(/(octop|vir)us$/i, \"\\\\1i\")\nInflector.inflections.plural(/(octop|vir)i$/i, \"\\\\1i\")\nInflector.inflections.plural(/(alias|status)$/i, \"\\\\1es\")\nInflector.inflections.plural(/(bu)s$/i, \"\\\\1ses\")\nInflector.inflections.plural(/(buffal|tomat)o$/i, \"\\\\1oes\")\nInflector.inflections.plural(/([ti])um$/i, \"\\\\1a\")\nInflector.inflections.plural(/([ti])a$/i, \"\\\\1a\")\nInflector.inflections.plural(/sis$/i, \"ses\")\nInflector.inflections.plural(/(?:([^f])fe|([lr])f)$/i, \"\\\\1\\\\2ves\")\nInflector.inflections.plural(/(hive)$/i, \"\\\\1s\")\nInflector.inflections.plural(/([^aeiouy]|qu)y$/i, \"\\\\1ies\")\nInflector.inflections.plural(/(x|ch|ss|sh)$/i, \"\\\\1es\")\nInflector.inflections.plural(/(matr|vert|ind)(?:ix|ex)$/i, \"\\\\1ices\")\nInflector.inflections.plural(/^(m|l)ouse$/i, \"\\\\1ice\")\nInflector.inflections.plural(/^(m|l)ice$/i, \"\\\\1ice\")\nInflector.inflections.plural(/^(ox)$/i, \"\\\\1en\")\nInflector.inflections.plural(/^(oxen)$/i, \"\\\\1\")\nInflector.inflections.plural(/(quiz)$/i, \"\\\\1zes\")\n\nInflector.inflections.singular(/s$/i, \"\")\nInflector.inflections.singular(/(ss)$/i, \"\\\\1\")\nInflector.inflections.singular(/(n)ews$/i, \"\\\\1ews\")\nInflector.inflections.singular(/([ti])a$/i, \"\\\\1um\")\nInflector.inflections.singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, \"\\\\1sis\")\nInflector.inflections.singular(/(^analy)(sis|ses)$/i, \"\\\\1sis\")\nInflector.inflections.singular(/([^f])ves$/i, \"\\\\1fe\")\nInflector.inflections.singular(/(hive)s$/i, \"\\\\1\")\nInflector.inflections.singular(/(tive)s$/i, \"\\\\1\")\nInflector.inflections.singular(/([lr])ves$/i, \"\\\\1f\")\nInflector.inflections.singular(/([^aeiouy]|qu)ies$/i, \"\\\\1y\")\nInflector.inflections.singular(/(s)eries$/i, \"\\\\1eries\")\nInflector.inflections.singular(/(m)ovies$/i, \"\\\\1ovie\")\nInflector.inflections.singular(/(x|ch|ss|sh)es$/i, \"\\\\1\")\nInflector.inflections.singular(/^(m|l)ice$/i, \"\\\\1ouse\")\nInflector.inflections.singular(/(bus)(es)?$/i, \"\\\\1\")\nInflector.inflections.singular(/(o)es$/i, \"\\\\1\")\nInflector.inflections.singular(/(shoe)s$/i, \"\\\\1\")\nInflector.inflections.singular(/(cris|test)(is|es)$/i, \"\\\\1is\")\nInflector.inflections.singular(/^(a)x[ie]s$/i, \"\\\\1xis\")\nInflector.inflections.singular(/(octop|vir)(us|i)$/i, \"\\\\1us\")\nInflector.inflections.singular(/(alias|status)(es)?$/i, \"\\\\1\")\nInflector.inflections.singular(/^(ox)en/i, \"\\\\1\")\nInflector.inflections.singular(/(vert|ind)ices$/i, \"\\\\1ex\")\nInflector.inflections.singular(/(matr)ices$/i, \"\\\\1ix\")\nInflector.inflections.singular(/(quiz)zes$/i, \"\\\\1\")\nInflector.inflections.singular(/(database)s$/i, \"\\\\1\")\n\nInflector.inflections.irregular(\"person\", \"people\")\nInflector.inflections.irregular(\"man\", \"men\")\nInflector.inflections.irregular(\"human\", \"humans\")\nInflector.inflections.irregular(\"child\", \"children\")\nInflector.inflections.irregular(\"sex\", \"sexes\")\nInflector.inflections.irregular(\"move\", \"moves\")\nInflector.inflections.irregular(\"zombie\", \"zombies\")\n\nInflector.inflections.uncountable([\"equipment\", \"information\", \"rice\", \"money\", \"species\", \"series\", \"fish\", \"sheep\", \"jeans\", \"police\"] of ::String)\n"},"external_var":false}],"types":[{"html_id":"Wordsmith/Wordsmith/Inflector","path":"Wordsmith/Inflector.html","kind":"module","full_name":"Wordsmith::Inflector","name":"Inflector","abstract":false,"locations":[{"filename":"src/wordsmith/inflector/inflections.cr","line_number":2,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L2"},{"filename":"src/wordsmith/inflector/methods.cr","line_number":4,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L4"}],"repository_name":"Wordsmith","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"Wordsmith/Wordsmith/Inflector","kind":"module","full_name":"Wordsmith::Inflector","name":"Inflector"}],"namespace":{"html_id":"Wordsmith/Wordsmith","kind":"module","full_name":"Wordsmith","name":"Wordsmith"},"instance_methods":[{"html_id":"camelize(term:String,uppercase_first_letter:Bool=true):String-instance-method","name":"camelize","doc":"Convert a given word to the camel-case version of that word.\n\nOptionally, a second parameter can be provided that controls whether or not the first letter is capitalized.\n\nExamples:\n```\nWordsmith::Inflector.camelize(\"application_controller\")                                # => \"ApplicationController\"\nWordsmith::Inflector.camelize(\"application_controller\", uppercase_first_letter: false) # => \"applicationController\"\n```","summary":"<p>Convert a given word to the camel-case version of that word.</p>","abstract":false,"args":[{"name":"term","external_name":"term","restriction":"String"},{"name":"uppercase_first_letter","default_value":"true","external_name":"uppercase_first_letter","restriction":"Bool"}],"args_string":"(term : String, uppercase_first_letter : Bool = true) : String","args_html":"(term : String, uppercase_first_letter : Bool = <span class=\"n\">true</span>) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":40,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L40"},"def":{"name":"camelize","args":[{"name":"term","external_name":"term","restriction":"String"},{"name":"uppercase_first_letter","default_value":"true","external_name":"uppercase_first_letter","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"string = if uppercase_first_letter\n  term.sub(/^[a-z\\d]*/) do |match|\n    inflections.acronyms[match]? || match.capitalize\n  end\nelse\n  term.sub(/^(?:#{inflections.acronym_regex}(?=\\b|[A-Z_])|\\w)/) do |match|\n    match.downcase\n  end\nend\nstring = string.gsub(/(?:_|(\\/))([a-z\\d]*)/i) do |_string, match|\n  \"#{match[1]?}#{inflections.acronyms[match[2]]? || match[2].capitalize}\"\nend\nstring = string.gsub(\"/\", \"::\")\nstring\n"},"external_var":false},{"html_id":"classify(table_name:String|Symbol):String-instance-method","name":"classify","doc":"Convert a given table name to the class name for that table.\n\nExamples:\n```\nWordsmith::Inflector.classify(\"users\")               # => \"User\"\nWordsmith::Inflector.classify(\"people\")              # => \"Person\"\nWordsmith::Inflector.classify(\"schema.users\")        # => \"User\"\nWordsmith::Inflector.classify(\"schema.public.users\") # => \"User\"\n```","summary":"<p>Convert a given table name to the class name for that table.</p>","abstract":false,"args":[{"name":"table_name","external_name":"table_name","restriction":"String | Symbol"}],"args_string":"(table_name : String | Symbol) : String","args_html":"(table_name : String | Symbol) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":155,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L155"},"def":{"name":"classify","args":[{"name":"table_name","external_name":"table_name","restriction":"String | Symbol"}],"return_type":"String","visibility":"Public","body":"camelize(singularize(table_name.to_s.sub(/.*\\./, \"\")))"},"external_var":false},{"html_id":"dasherize(underscored_word:String):String-instance-method","name":"dasherize","doc":"Convert a given underscore-separated word to the same word, separated by dashes.\n\nExample:\n```\nWordsmith::Inflector.dasherize(\"post_office\") # => \"post-office\"\n```","summary":"<p>Convert a given underscore-separated word to the same word, separated by dashes.</p>","abstract":false,"args":[{"name":"underscored_word","external_name":"underscored_word","restriction":"String"}],"args_string":"(underscored_word : String) : String","args_html":"(underscored_word : String) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":166,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L166"},"def":{"name":"dasherize","args":[{"name":"underscored_word","external_name":"underscored_word","restriction":"String"}],"return_type":"String","visibility":"Public","body":"underscored_word.tr(\"_\", \"-\")"},"external_var":false},{"html_id":"deconstantize(path:String):String-instance-method","name":"deconstantize","doc":"Remove any trailing constants from the provided path.\n\nExample:\n```\nWordsmith::Inflector.deconstantize(\"Helpers::Mixins::User::FREE_TIER_COMMENTS\") # => \"Helpers::Mixins::User\"\n```","summary":"<p>Remove any trailing constants from the provided path.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(path : String) : String","args_html":"(path : String) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":190,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L190"},"def":{"name":"deconstantize","args":[{"name":"path","external_name":"path","restriction":"String"}],"return_type":"String","visibility":"Public","body":"path[0, (path.rindex(\"::\")) || 0]"},"external_var":false},{"html_id":"demodulize(path:String):String-instance-method","name":"demodulize","doc":"Remove leading modules from a provided class name path.\n\nExample:\n```\nWordsmith::Inflector.demodulize(\"Helpers::Mixins::User\") # => \"User\"\n```","summary":"<p>Remove leading modules from a provided class name path.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(path : String) : String","args_html":"(path : String) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":176,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L176"},"def":{"name":"demodulize","args":[{"name":"path","external_name":"path","restriction":"String"}],"return_type":"String","visibility":"Public","body":"if i = path.rindex(\"::\")\n  path[(i + 2)..-1]\nelse\n  path\nend"},"external_var":false},{"html_id":"foreign_key(class_name:String,separate_class_name_and_id_with_underscore:Bool=true):String-instance-method","name":"foreign_key","doc":"Determine the foreign key representation of a given class name.\n\nExample:\n```\nWordsmith::Inflector.foreign_key(\"Person\") # => \"person_id\"\n```","summary":"<p>Determine the foreign key representation of a given class name.</p>","abstract":false,"args":[{"name":"class_name","external_name":"class_name","restriction":"String"},{"name":"separate_class_name_and_id_with_underscore","default_value":"true","external_name":"separate_class_name_and_id_with_underscore","restriction":"Bool"}],"args_string":"(class_name : String, separate_class_name_and_id_with_underscore : Bool = true) : String","args_html":"(class_name : String, separate_class_name_and_id_with_underscore : Bool = <span class=\"n\">true</span>) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":200,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L200"},"def":{"name":"foreign_key","args":[{"name":"class_name","external_name":"class_name","restriction":"String"},{"name":"separate_class_name_and_id_with_underscore","default_value":"true","external_name":"separate_class_name_and_id_with_underscore","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"(underscore(demodulize(class_name))) + (separate_class_name_and_id_with_underscore ? \"_id\" : \"id\")"},"external_var":false},{"html_id":"humanize(lower_case_and_underscored_word:String,capitalize:Bool=true,keep_id_suffix:Bool=false):String-instance-method","name":"humanize","doc":"Convert a given word to the human-friendly version of that word.\n\nCapitalization and whether or not to retain an `_id` suffix can be controlled with optional parameters.\n\nExamples:\n```\nWordsmith::Inflector.humanize(\"employee_id\")                       # => \"Employee\"\nWordsmith::Inflector.humanize(\"employee_id\", capitalize: false)    # => \"employee\"\nWordsmith::Inflector.humanize(\"employee_id\", keep_id_suffix: true) # => \"Employee id\"\n```","summary":"<p>Convert a given word to the human-friendly version of that word.</p>","abstract":false,"args":[{"name":"lower_case_and_underscored_word","external_name":"lower_case_and_underscored_word","restriction":"String"},{"name":"capitalize","default_value":"true","external_name":"capitalize","restriction":"Bool"},{"name":"keep_id_suffix","default_value":"false","external_name":"keep_id_suffix","restriction":"Bool"}],"args_string":"(lower_case_and_underscored_word : String, capitalize : Bool = true, keep_id_suffix : Bool = false) : String","args_html":"(lower_case_and_underscored_word : String, capitalize : Bool = <span class=\"n\">true</span>, keep_id_suffix : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":86,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L86"},"def":{"name":"humanize","args":[{"name":"lower_case_and_underscored_word","external_name":"lower_case_and_underscored_word","restriction":"String"},{"name":"capitalize","default_value":"true","external_name":"capitalize","restriction":"Bool"},{"name":"keep_id_suffix","default_value":"false","external_name":"keep_id_suffix","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"result = lower_case_and_underscored_word.dup\n\ninflections.humans.each do |rule, replacement|\n  if result.index(rule)\n    result = result.sub(rule, replacement)\n    break\n  end\nend\n\nresult = result.sub(/\\A_+/, \"\")\nif keep_id_suffix\nelse\n  result = result.sub(/_id\\z/, \"\")\nend\nresult = result.tr(\"_\", \" \")\n\nresult = result.gsub(/([a-z\\d]*)/i) do |match|\n  \"#{inflections.acronyms[match.downcase]? || match.downcase}\"\nend\n\nif capitalize\n  result = result.sub(/\\A\\w/, &.upcase)\nend\n\nresult\n"},"external_var":false},{"html_id":"inflections:Inflections-instance-method","name":"inflections","doc":"Return the current set of stored inflection logic.","summary":"<p>Return the current set of stored inflection logic.</p>","abstract":false,"location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":9,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L9"},"def":{"name":"inflections","return_type":"Inflections","visibility":"Public","body":"@@inflections"},"external_var":false},{"html_id":"ordinal(number:Int|String):String-instance-method","name":"ordinal","doc":"Determine the ordinal suffix for a given number.\n\nExample:\n```\nWordsmith::Inflector.ordinal(1) # => \"st\"\nWordsmith::Inflector.ordinal(2) # => \"nd\"\nWordsmith::Inflector.ordinal(3) # => \"rd\"\nWordsmith::Inflector.ordinal(4) # => \"th\"\n```\nTODO: This should only take an Int","summary":"<p>Determine the ordinal suffix for a given number.</p>","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int | String"}],"args_string":"(number : Int | String) : String","args_html":"(number : Int | String) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":214,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L214"},"def":{"name":"ordinal","args":[{"name":"number","external_name":"number","restriction":"Int | String"}],"return_type":"String","visibility":"Public","body":"abs_number = number.to_i.abs\n\nif (11..13).includes?(abs_number % 100)\n  \"th\"\nelse\n  case abs_number % 10\n  when 1\n    \"st\"\n  when 2\n    \"nd\"\n  when 3\n    \"rd\"\n  else\n    \"th\"\n  end\nend\n"},"external_var":false},{"html_id":"ordinalize(number:Int|String):String-instance-method","name":"ordinalize","doc":"Given a number, return the number with the correct ordinal suffix.\n\nExample:\n```\nWordsmith::Inflector.ordinalize(1) # => \"1st\"\nWordsmith::Inflector.ordinalize(2) # => \"2nd\"\nWordsmith::Inflector.ordinalize(3) # => \"3rd\"\nWordsmith::Inflector.ordinalize(4) # => \"4th\"\n```\nTODO: This should only take an Int","summary":"<p>Given a number, return the number with the correct ordinal suffix.</p>","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int | String"}],"args_string":"(number : Int | String) : String","args_html":"(number : Int | String) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":239,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L239"},"def":{"name":"ordinalize","args":[{"name":"number","external_name":"number","restriction":"Int | String"}],"return_type":"String","visibility":"Public","body":"\"#{number}#{ordinal(number)}\""},"external_var":false},{"html_id":"parameterize(content:String,separator:String|Nil=\"-\",preserve_case:Bool=false):String-instance-method","name":"parameterize","doc":"Convert the given string to a parameter-friendly version.\n\nThe used separator and whether or not to preserve the original object case can be controlled through optional parameters.\n\nExamples:\n```\nWordsmith::Inflector.parameterize(\"Admin/product\")                       # => \"admin-product\"\nWordsmith::Inflector.parameterize(\"Admin::Product\", separator: \"_\")      # => \"admin_product\"\nWordsmith::Inflector.parameterize(\"Admin::Product\", preserve_case: true) # => \"Admin-Product\"\n```","summary":"<p>Convert the given string to a parameter-friendly version.</p>","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"},{"name":"separator","default_value":"\"-\"","external_name":"separator","restriction":"String | ::Nil"},{"name":"preserve_case","default_value":"false","external_name":"preserve_case","restriction":"Bool"}],"args_string":"(content : String, separator : String | Nil = \"-\", preserve_case : Bool = false) : String","args_html":"(content : String, separator : String | Nil = <span class=\"s\">&quot;-&quot;</span>, preserve_case : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":253,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L253"},"def":{"name":"parameterize","args":[{"name":"content","external_name":"content","restriction":"String"},{"name":"separator","default_value":"\"-\"","external_name":"separator","restriction":"String | ::Nil"},{"name":"preserve_case","default_value":"false","external_name":"preserve_case","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"parameterized_string = content.gsub(/[^a-z0-9\\-_]+/i, separator)\n\nif separator.nil? || separator.empty?\nelse\n  if separator == \"-\"\n    re_duplicate_separator = /-{2,}/\n    re_leading_trailing_separator = /^-|-$/i\n  else\n    re_sep = Regex.escape(separator)\n    re_duplicate_separator = /#{re_sep}{2,}/\n    re_leading_trailing_separator = /^#{re_sep}|#{re_sep}$/i\n  end\n  parameterized_string = parameterized_string.gsub(re_duplicate_separator, separator)\n  parameterized_string = parameterized_string.gsub(re_leading_trailing_separator, \"\")\nend\n\nif preserve_case\nelse\n  parameterized_string = parameterized_string.downcase\nend\nparameterized_string\n"},"external_var":false},{"html_id":"pluralize(word:String):String-instance-method","name":"pluralize","doc":"Given a word, return the plural version of that word.\n\nExample:\n```\nWordsmith::Inflector.pluralize(\"sandal\") # => \"sandals\"\nWordsmith::Inflector.pluralize(\"person\") # => \"people\"\nWordsmith::Inflector.pluralize(\"people\") # => \"people\"\n```","summary":"<p>Given a word, return the plural version of that word.</p>","abstract":false,"args":[{"name":"word","external_name":"word","restriction":"String"}],"args_string":"(word : String) : String","args_html":"(word : String) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":15,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L15"},"def":{"name":"pluralize","args":[{"name":"word","external_name":"word","restriction":"String"}],"return_type":"String","visibility":"Public","body":"apply_inflections(word, inflections.plurals)"},"external_var":false},{"html_id":"singularize(word:String):String-instance-method","name":"singularize","doc":"Given a word, return the singular version of that word.\n\nExample:\n```\nWordsmith::Inflector.singularize(\"sandals\") # => \"sandal\"\nWordsmith::Inflector.singularize(\"people\")  # => \"person\"\nWordsmith::Inflector.singularize(\"person\")  # => \"person\"\n```","summary":"<p>Given a word, return the singular version of that word.</p>","abstract":false,"args":[{"name":"word","external_name":"word","restriction":"String"}],"args_string":"(word : String) : String","args_html":"(word : String) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":27,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L27"},"def":{"name":"singularize","args":[{"name":"word","external_name":"word","restriction":"String"}],"return_type":"String","visibility":"Public","body":"apply_inflections(word, inflections.singulars)"},"external_var":false},{"html_id":"tableize(class_name:String):String-instance-method","name":"tableize","doc":"Convert a given class name to the database table name for that class.\n\nExamples:\n```\nWordsmith::Inflector.tableize(\"User\")   # => \"users\"\nWordsmith::Inflector.tableize(\"Person\") # => \"people\"\n```","summary":"<p>Convert a given class name to the database table name for that class.</p>","abstract":false,"args":[{"name":"class_name","external_name":"class_name","restriction":"String"}],"args_string":"(class_name : String) : String","args_html":"(class_name : String) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":142,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L142"},"def":{"name":"tableize","args":[{"name":"class_name","external_name":"class_name","restriction":"String"}],"return_type":"String","visibility":"Public","body":"pluralize(underscore(class_name))"},"external_var":false},{"html_id":"titleize(word:String,keep_id_suffix:Bool=false):String-instance-method","name":"titleize","doc":"Convert a given word to the titleized version of that word, which generally means each word is capitalized.\n\nExample:\n```\nWordsmith::Inflector.titleize(\"amazon web services\") # => \"Amazon Web Services\"\n```","summary":"<p>Convert a given word to the titleized version of that word, which generally means each word is capitalized.</p>","abstract":false,"args":[{"name":"word","external_name":"word","restriction":"String"},{"name":"keep_id_suffix","default_value":"false","external_name":"keep_id_suffix","restriction":"Bool"}],"args_string":"(word : String, keep_id_suffix : Bool = false) : String","args_html":"(word : String, keep_id_suffix : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":129,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L129"},"def":{"name":"titleize","args":[{"name":"word","external_name":"word","restriction":"String"},{"name":"keep_id_suffix","default_value":"false","external_name":"keep_id_suffix","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"(humanize(underscore(word), keep_id_suffix: keep_id_suffix)).gsub(/\\b(?<!\\w['’`])[a-z]/) do |match|\n  match.capitalize\nend"},"external_var":false},{"html_id":"underscore(camel_cased_word:String):String-instance-method","name":"underscore","doc":"Convert a given camel-case word to the underscored version of that word.\n\nExample:\n```\nWordsmith::Inflector.underscore(\"ApplicationController\") # => \"application_controller\"\n```","summary":"<p>Convert a given camel-case word to the underscored version of that word.</p>","abstract":false,"args":[{"name":"camel_cased_word","external_name":"camel_cased_word","restriction":"String"}],"args_string":"(camel_cased_word : String) : String","args_html":"(camel_cased_word : String) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":63,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L63"},"def":{"name":"underscore","args":[{"name":"camel_cased_word","external_name":"camel_cased_word","restriction":"String"}],"return_type":"String","visibility":"Public","body":"if camel_cased_word =~ (/[A-Z-]|::/)\nelse\n  return camel_cased_word\nend\nword = camel_cased_word.gsub(\"::\", \"/\")\nword = word.gsub(/(?:(?<=([A-Za-z\\d]))|\\b)(#{inflections.acronym_regex})(?=\\b|[^a-z])/) do |_string, match|\n  \"#{match[1]? && \"_\"}#{match[2].downcase}\"\nend\nword = word.gsub(/([A-Z\\d]+)([A-Z][a-z])/, \"\\\\1_\\\\2\")\nword = word.gsub(/([a-z\\d])([A-Z])/, \"\\\\1_\\\\2\")\nword = word.tr(\"-\", \"_\")\nword = word.downcase\nword\n"},"external_var":false},{"html_id":"upcase_first(string:String):String-instance-method","name":"upcase_first","doc":"Capitalize the first letter of a given word.\n\nExample:\n```\nWordsmith::Inflector.upcase_first(\"lucky\") # => \"Lucky\"\n```","summary":"<p>Capitalize the first letter of a given word.</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"}],"args_string":"(string : String) : String","args_html":"(string : String) : String","location":{"filename":"src/wordsmith/inflector/methods.cr","line_number":119,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/methods.cr#L119"},"def":{"name":"upcase_first","args":[{"name":"string","external_name":"string","restriction":"String"}],"return_type":"String","visibility":"Public","body":"string.size > 0 ? string[0].upcase + string[1..-1] : \"\""},"external_var":false}],"types":[{"html_id":"Wordsmith/Wordsmith/Inflector/Inflections","path":"Wordsmith/Inflector/Inflections.html","kind":"class","full_name":"Wordsmith::Inflector::Inflections","name":"Inflections","abstract":false,"superclass":{"html_id":"Wordsmith/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Wordsmith/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Wordsmith/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wordsmith/inflector/inflections.cr","line_number":14,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L14"}],"repository_name":"Wordsmith","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"Wordsmith/Wordsmith/Inflector","kind":"module","full_name":"Wordsmith::Inflector","name":"Inflector"},"doc":"Create and manipulate the set of valid Wordsmith inflections.","summary":"<p>Create and manipulate the set of valid Wordsmith inflections.</p>","constructors":[{"html_id":"new-class-method","name":"new","doc":"Create a new object to store the collection of inflectable words and patterns.","summary":"<p>Create a new object to store the collection of inflectable words and patterns.</p>","abstract":false,"location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":74,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L74"},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"acronym(word:String):Nil-instance-method","name":"acronym","doc":"Define a new acronym that should be recognized.\n\nExample:\n```\nWordsmith::Inflector.inflections.acronym(\"API\")\nWordsmith::Inflector.camelize(\"API\")   # => \"API\"\nWordsmith::Inflector.underscore(\"API\") # => \"api\"\nWordsmith::Inflector.humanize(\"API\")   # => \"API\"\nWordsmith::Inflector.titleize(\"API\")   # => \"API\"\n```","summary":"<p>Define a new acronym that should be recognized.</p>","abstract":false,"args":[{"name":"word","external_name":"word","restriction":"String"}],"args_string":"(word : String) : Nil","args_html":"(word : String) : Nil","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":93,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L93"},"def":{"name":"acronym","args":[{"name":"word","external_name":"word","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"@acronyms[word.downcase] = word\n@acronym_regex = /#{acronyms.values.join(\"|\")}/\n"},"external_var":false},{"html_id":"acronym_regex:Regex-instance-method","name":"acronym_regex","doc":"Return the current set of acronym `Regex` patterns to recognize.","summary":"<p>Return the current set of acronym <code>Regex</code> patterns to recognize.</p>","abstract":false,"location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":71,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L71"},"def":{"name":"acronym_regex","return_type":"Regex","visibility":"Public","body":"@acronym_regex"},"external_var":false},{"html_id":"acronyms:Hash(String,String)-instance-method","name":"acronyms","doc":"Return the current set of acronym strings to recognize.","summary":"<p>Return the current set of acronym strings to recognize.</p>","abstract":false,"location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":68,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L68"},"def":{"name":"acronyms","return_type":"Hash(String, String)","visibility":"Public","body":"@acronyms"},"external_var":false},{"html_id":"clear(scope:Symbol=:all):Nil-instance-method","name":"clear","doc":"Remove all currently-stored Inflection rules, or a subset of rules.\n\nSubsets can be provided with the `scope` parameter, and can be any of:\n* `:all`\n* `:plurals`\n* `:singulars`\n* `:uncountables`\n* `:humans`\nTODO: This arg should be an enum","summary":"<p>Remove all currently-stored Inflection rules, or a subset of rules.</p>","abstract":false,"args":[{"name":"scope","default_value":":all","external_name":"scope","restriction":"Symbol"}],"args_string":"(scope : Symbol = :all) : Nil","args_html":"(scope : Symbol = <span class=\"n\">:all</span>) : Nil","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":227,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L227"},"def":{"name":"clear","args":[{"name":"scope","default_value":":all","external_name":"scope","restriction":"Symbol"}],"return_type":"Nil","visibility":"Public","body":"scopes = scope == (:all) ? [:plurals, :singulars, :uncountables, :humans] : [scope]\n\nscopes.each do |s|\n  case s\n  when :plurals\n    @plurals = Hash(Regex, String).new\n  when :singulars\n    @singulars = Hash(Regex, String).new\n  when :uncountables\n    @uncountables = Uncountables.new\n  when :humans\n    @humans = Hash(Regex, String).new\n  end\nend\n"},"external_var":false},{"html_id":"human(rule:String|Regex,replacement:String):Nil-instance-method","name":"human","doc":"Define a new humanize rule, either using a pattern or string.\n\nExample with a `Regex` pattern:\n```\nWordsmith::Inflector.inflections.human(/^prefix_/i, \"\\\\1\")\nWordsmith::Inflector.humanize(\"prefix_request\") # => \"Request\"\n```\n\nExample with a `String`:\n```\nWordsmith::Inflector.inflections.human(\"col_rpted_bugs\", \"Reported bugs\")\nWordsmith::Inflector.humanize(\"col_rpted_bugs\") # => \"Reported bugs\"\n```","summary":"<p>Define a new humanize rule, either using a pattern or string.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":"String | Regex"},{"name":"replacement","external_name":"replacement","restriction":"String"}],"args_string":"(rule : String | Regex, replacement : String) : Nil","args_html":"(rule : String | Regex, replacement : String) : Nil","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":213,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L213"},"def":{"name":"human","args":[{"name":"rule","external_name":"rule","restriction":"String | Regex"},{"name":"replacement","external_name":"replacement","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if rule.is_a?(String)\n  rule = /#{rule}/\nend\n@humans = {rule => replacement}.merge(@humans)\n"},"external_var":false},{"html_id":"humans:Hash(Regex,String)-instance-method","name":"humans","doc":"Return the current set of items that can be humanized.","summary":"<p>Return the current set of items that can be humanized.</p>","abstract":false,"location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":65,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L65"},"def":{"name":"humans","return_type":"Hash(Regex, String)","visibility":"Public","body":"@humans"},"external_var":false},{"html_id":"irregular(singular:String,plural:String):Nil-instance-method","name":"irregular","doc":"Define a new irregular `String` with a direct translation between singular and plural form.\n\nExample:\n```\nWordsmith::Inflector.inflections.irregular(\"person\", \"people\")\nWordsmith::Inflector.singularize(\"people\") # => \"person\"\nWordsmith::Inflector.pluralize(\"person\")   # => \"people\"\n```","summary":"<p>Define a new irregular <code>String</code> with a direct translation between singular and plural form.</p>","abstract":false,"args":[{"name":"singular","external_name":"singular","restriction":"String"},{"name":"plural","external_name":"plural","restriction":"String"}],"args_string":"(singular : String, plural : String) : Nil","args_html":"(singular : String, plural : String) : Nil","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":152,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L152"},"def":{"name":"irregular","args":[{"name":"singular","external_name":"singular","restriction":"String"},{"name":"plural","external_name":"plural","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"@uncountables.delete(singular)\n@uncountables.delete(plural)\n\ns0 = singular[0]\nsrest = singular[1..-1]\n\np0 = plural[0]\nprest = plural[1..-1]\n\nif s0.upcase == p0.upcase\n  plural(/(#{s0})#{srest}$/i, \"\\\\1\" + prest)\n  plural(/(#{p0})#{prest}$/i, \"\\\\1\" + prest)\n\n  singular(/(#{s0})#{srest}$/i, \"\\\\1\" + srest)\n  singular(/(#{p0})#{prest}$/i, \"\\\\1\" + srest)\nelse\n  plural(/#{s0.upcase}(?i)#{srest}$/, p0.upcase + prest)\n  plural(/#{s0.downcase}(?i)#{srest}$/, p0.downcase + prest)\n  plural(/#{p0.upcase}(?i)#{prest}$/, p0.upcase + prest)\n  plural(/#{p0.downcase}(?i)#{prest}$/, p0.downcase + prest)\n\n  singular(/#{s0.upcase}(?i)#{srest}$/, s0.upcase + srest)\n  singular(/#{s0.downcase}(?i)#{srest}$/, s0.downcase + srest)\n  singular(/#{p0.upcase}(?i)#{prest}$/, s0.upcase + srest)\n  singular(/#{p0.downcase}(?i)#{prest}$/, s0.downcase + srest)\nend\n"},"external_var":false},{"html_id":"plural(rule:String|Regex,replacement:String):Nil-instance-method","name":"plural","doc":"Define a new pluralization rule, either using a pattern or string.\n\nExample with a `Regex` pattern:\n```\nWordsmith::Inflector.inflections.plural(/^goose(\\S*)$/i, \"geese\\\\1\")\nWordsmith::Inflector.pluralize(\"goosebumps\") # => \"geesebumps\"\n```\n\nExample with a `String`:\n```\nWordsmith::Inflector.inflections.plural(\"goosebumps\", \"geesebumps\")\nWordsmith::Inflector.pluralize(\"goosebumps\") # => \"geesebumps\"\n```","summary":"<p>Define a new pluralization rule, either using a pattern or string.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":"String | Regex"},{"name":"replacement","external_name":"replacement","restriction":"String"}],"args_string":"(rule : String | Regex, replacement : String) : Nil","args_html":"(rule : String | Regex, replacement : String) : Nil","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":111,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L111"},"def":{"name":"plural","args":[{"name":"rule","external_name":"rule","restriction":"String | Regex"},{"name":"replacement","external_name":"replacement","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if rule.is_a?(String)\n  @uncountables.delete(rule)\n  rule = /#{rule}/\nend\n@uncountables.delete(replacement)\nnew_plural = {rule => replacement}\n@plurals = @plurals.merge(new_plural)\n"},"external_var":false},{"html_id":"plurals:Hash(Regex,String)-instance-method","name":"plurals","doc":"Return the current set of matched pluralization patterns.","summary":"<p>Return the current set of matched pluralization patterns.</p>","abstract":false,"location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":56,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L56"},"def":{"name":"plurals","return_type":"Hash(Regex, String)","visibility":"Public","body":"@plurals"},"external_var":false},{"html_id":"singular(rule:String|Regex,replacement:String):Nil-instance-method","name":"singular","doc":"Define a new singularization rule, either using a pattern or string.\n\nExample with a `Regex` pattern:\n```\nWordsmith::Inflector.inflections.singular(/^(ox)en$/i, \"\\\\1\")\nWordsmith::Inflector.singularize(\"oxen\") # => \"ox\"\n```\n\nExample with a `String`:\n```\nWordsmith::Inflector.inflections.singular(\"mice\", \"mouse\")\nWordsmith::Inflector.singularize(\"mice\") # => \"mouse\"\n```","summary":"<p>Define a new singularization rule, either using a pattern or string.</p>","abstract":false,"args":[{"name":"rule","external_name":"rule","restriction":"String | Regex"},{"name":"replacement","external_name":"replacement","restriction":"String"}],"args_string":"(rule : String | Regex, replacement : String) : Nil","args_html":"(rule : String | Regex, replacement : String) : Nil","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":134,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L134"},"def":{"name":"singular","args":[{"name":"rule","external_name":"rule","restriction":"String | Regex"},{"name":"replacement","external_name":"replacement","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if rule.is_a?(String)\n  @uncountables.delete(rule)\n  rule = /#{rule}/\nend\n@uncountables.delete(replacement)\nnew_singular = {rule => replacement}\n@singulars = @singulars.merge(new_singular)\n"},"external_var":false},{"html_id":"singulars:Hash(Regex,String)-instance-method","name":"singulars","doc":"Return the current set of matched singularization patterns.","summary":"<p>Return the current set of matched singularization patterns.</p>","abstract":false,"location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":59,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L59"},"def":{"name":"singulars","return_type":"Hash(Regex, String)","visibility":"Public","body":"@singulars"},"external_var":false},{"html_id":"uncountable(*words):Uncountables-instance-method","name":"uncountable","doc":"Define a new uncountable `String` that should stay the same between singular and plural form.\n\nExample with a single `String`:\n```\nWordsmith::Inflector.inflections.uncountable(\"jedi\")\nWordsmith::Inflector.singularize(\"jedi\") # => \"jedi\"\nWordsmith::Inflector.pluralize(\"jedi\")   # => \"jedi\"\n```\n\nExample with a single `String`:\n```\nWordsmith::Inflector.inflections.uncountable(%w(fish jedi))\nWordsmith::Inflector.singularize(\"jedi\") # => \"jedi\"\nWordsmith::Inflector.pluralize(\"fish\")   # => \"fish\"\n```","summary":"<p>Define a new uncountable <code>String</code> that should stay the same between singular and plural form.</p>","abstract":false,"args":[{"name":"words","external_name":"words","restriction":""}],"args_string":"(*words) : Uncountables","args_html":"(*words) : <a href=\"../../Wordsmith/Inflector/Inflections/Uncountables.html\">Uncountables</a>","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":196,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L196"},"def":{"name":"uncountable","args":[{"name":"words","external_name":"words","restriction":""}],"splat_index":0,"return_type":"Uncountables","visibility":"Public","body":"@uncountables.add(words.to_a)"},"external_var":false},{"html_id":"uncountables:Uncountables-instance-method","name":"uncountables","doc":"Return the current set of items considered uncountable.","summary":"<p>Return the current set of items considered uncountable.</p>","abstract":false,"location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":62,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L62"},"def":{"name":"uncountables","return_type":"Uncountables","visibility":"Public","body":"@uncountables"},"external_var":false}],"types":[{"html_id":"Wordsmith/Wordsmith/Inflector/Inflections/Uncountables","path":"Wordsmith/Inflector/Inflections/Uncountables.html","kind":"class","full_name":"Wordsmith::Inflector::Inflections::Uncountables","name":"Uncountables","abstract":false,"superclass":{"html_id":"Wordsmith/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Wordsmith/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Wordsmith/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/wordsmith/inflector/inflections.cr","line_number":16,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L16"}],"repository_name":"Wordsmith","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"Wordsmith/Wordsmith/Inflector/Inflections","kind":"class","full_name":"Wordsmith::Inflector::Inflections","name":"Inflections"},"doc":"Create and manipulate the set of words that Wordsmith should leave as-is.","summary":"<p>Create and manipulate the set of words that Wordsmith should leave as-is.</p>","constructors":[{"html_id":"new-class-method","name":"new","doc":"Create a new object to store the collection of uncountable words and patterns.","summary":"<p>Create a new object to store the collection of uncountable words and patterns.</p>","abstract":false,"location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":20,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L20"},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"<<(*word):self-instance-method","name":"<<","doc":"Add an entry to the set of uncountable words and patterns.","summary":"<p>Add an entry to the set of uncountable words and patterns.</p>","abstract":false,"args":[{"name":"word","external_name":"word","restriction":""}],"args_string":"(*word) : self","args_html":"(*word) : <span class=\"k\">self</span>","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":40,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L40"},"def":{"name":"<<","args":[{"name":"word","external_name":"word","restriction":""}],"splat_index":0,"return_type":"self","visibility":"Public","body":"add(word)"},"external_var":false},{"html_id":"add(words:Enumerable):self-instance-method","name":"add","doc":"Add an entry to the set of uncountable words and patterns.","summary":"<p>Add an entry to the set of uncountable words and patterns.</p>","abstract":false,"args":[{"name":"words","external_name":"words","restriction":"Enumerable"}],"args_string":"(words : Enumerable) : self","args_html":"(words : Enumerable) : <span class=\"k\">self</span>","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":32,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L32"},"def":{"name":"add","args":[{"name":"words","external_name":"words","restriction":"Enumerable"}],"return_type":"self","visibility":"Public","body":"words = words.to_a.flatten.map(&.downcase)\nconcat(words)\n@regex_array = @regex_array + words.map do |word|\n  to_regex(word)\nend\nself\n"},"external_var":false},{"html_id":"delete(entry):Nil-instance-method","name":"delete","doc":"Remove an entry from the set of uncountable words and patterns.","summary":"<p>Remove an entry from the set of uncountable words and patterns.</p>","abstract":false,"args":[{"name":"entry","external_name":"entry","restriction":""}],"args_string":"(entry) : Nil","args_html":"(entry) : Nil","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":26,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L26"},"def":{"name":"delete","args":[{"name":"entry","external_name":"entry","restriction":""}],"return_type":"Nil","visibility":"Public","body":"@uncoundtables_array.delete(entry)\n@regex_array.delete(to_regex(entry))\n"},"external_var":false},{"html_id":"uncountable?(str:String):Bool-instance-method","name":"uncountable?","doc":"Check whether or not a provided string is currently considered uncountable.","summary":"<p>Check whether or not a provided string is currently considered uncountable.</p>","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"}],"args_string":"(str : String) : Bool","args_html":"(str : String) : Bool","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":45,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L45"},"def":{"name":"uncountable?","args":[{"name":"str","external_name":"str","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"@regex_array.any?(&.match(str))"},"external_var":false}],"macros":[{"html_id":"method_missing(call)-macro","name":"method_missing","abstract":false,"args":[{"name":"call","external_name":"call","restriction":""}],"args_string":"(call)","args_html":"(call)","location":{"filename":"src/wordsmith/inflector/inflections.cr","line_number":17,"url":"https://github.com/luckyframework/wordsmith/blob/88b79b3cb7b16451f07f6f175165d508865f014b/src/wordsmith/inflector/inflections.cr#L17"},"def":{"name":"method_missing","args":[{"name":"call","external_name":"call","restriction":""}],"visibility":"Public","body":"      @uncoundtables_array.\n{{ call }}\n\n    \n"}}]}]}]}]}]}})